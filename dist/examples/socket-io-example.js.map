{"version":3,"sources":["../../src/examples/socket-io-example.js"],"names":["ioPort","io","listen","apiFuncs","square","num","sqrt","Math","on","socket","console","log","promisedAPI","foo","name","arg","ctx","secs","Promise","f","r","setTimeout","promisedClient","emit","then","result","methods","clientAPI","forEach","method","argument","testContext","asyncWait","process","exit","catch","err"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,MAAMA,SAAS,IAAf;AACA,MAAMC,KAAK,wBAAWC,MAAX,CAAkBF,MAAlB,CAAX;;AAEA;AACA,MAAMG,WAAW;AACfC,UAASC,GAAD,IAAS;AACf,WAAOA,MAAMA,GAAb;AACD,GAHc;AAIfC,QAAOD,GAAD,IAAS;AACb,WAAOE,KAAKD,IAAL,CAAUD,GAAV,CAAP;AACD;AANc,CAAjB;;AASA;AACAJ,GAAGO,EAAH,CAAM,YAAN,EAAoBC,UAAU;AAC5BC,UAAQC,GAAR,CAAY,iCAAZ;;AAEA;AACA;AACA,QAAMC,cAAc;AAClB;AACAH,QAFkB;AAGlB;AACAN,UAJkB;AAKlB;AACA;AACA,MAPkB;AAQlB;AACA;AACA,IAAEU,KAAK,KAAP,EAVkB,CAApB;;AAaA;AACA;AACA;AACAD,cACGJ,EADH,CACM,YADN,EACqBM,IAAD,IAAU;AAC1B,WAAQ,UAAQA,IAAK,IAArB;AACD,GAHH,EAIGN,EAJH,CAIM,aAJN,EAIqB,CAACO,GAAD,EAAMC,GAAN,KAAc;AAC/B,WAAOA,GAAP;AACD,GANH;AAOE;AACA;AARF,GASGR,EATH,CASM,WATN,EASoBS,IAAD,IAAU;AACzB;AACA;AACA;AACA,WAAO,IAAIC,OAAJ,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3B;AACA;AACAV,cAAQC,GAAR,CAAY,oBAAZ,EAAkCM,IAAlC,EAAwC,SAAxC;AACAI,iBAAW,MAAM;AACfX,gBAAQC,GAAR,CAAY,mBAAZ,EAAiCM,IAAjC,EAAuC,SAAvC;AACAE,UAAG,eAAaF,IAAK,0BAArB;AACD,OAHD,EAGGA,OAAO,IAHV;AAID,KARM,CAAP;AASD,GAtBH;AAwBD,CA7CD;;AA+CA;;AAEA;AACA,MAAMR,SAAS,qBAAoB,mBAAiBT,MAAO,GAA5C,CAAf;;AAEA;AACA,MAAMsB,iBAAiB,oBAAoBb,MAApB,CAAvB;;AAEA;AACA;AACA;AACAa,eAAeC,IAAf,CAAoB,QAApB,EAA8B,CAA9B,EAAiCC,IAAjC,CAAuCC,MAAD,IAAY;AAChDf,UAAQC,GAAR,CAAa,yCAAuCc,MAAO,GAA3D;AACD,CAFD;;AAIA;AACA;AACA;AACAH,eAAeC,IAAf,CAAoB,gBAApB,EAAsCC,IAAtC,CAA4CE,OAAD,IAAa;AACtD,MAAIC,YAAY,EAAhB;;AAEAjB,UAAQC,GAAR,CAAY,4CAAZ,EAA0De,OAA1D;;AAEAA,UAAQE,OAAR,CAAiBC,MAAD,IAAY;AAC1BnB,YAAQC,GAAR,CAAY,KAAZ,EAAmBkB,MAAnB;AACAF,cAAUE,MAAV,IAAqBC,QAAD,IAAcR,eAAeC,IAAf,CAAoBM,MAApB,EAA4BC,QAA5B,CAAlC;AACD,GAHD;;AAKA;AACA;AACAH,YAAUI,WAAV,GAAwBP,IAAxB,CAA8BC,MAAD,IAAY;AACvCf,YAAQC,GAAR,CAAY,8BAAZ,EAA4Cc,MAA5C;AACD,GAFD;;AAIAE,YAAUK,SAAV,CAAoB,CAApB,EAAuBR,IAAvB,CAA6BC,MAAD,IAAY;AACtCf,YAAQC,GAAR,CAAY,mCAAZ,EAAiDc,MAAjD;AACAQ,YAAQC,IAAR,CAAa,CAAb;AACD,GAHD,EAGGC,KAHH,CAGUC,GAAD,IAAS;AAChB1B,YAAQC,GAAR,CAAY,cAAZ,EAA4ByB,GAA5B;AACAH,YAAQC,IAAR,CAAa,CAAb;AACD,GAND;AAOD,CAvBD,EAuBGC,KAvBH,CAuBUC,GAAD,IAAS;AAChB1B,UAAQC,GAAR,CAAY,4BAAZ;AACA,QAAMyB,GAAN;AACD,CA1BD","file":"socket-io-example.js","sourcesContent":["import PromisedEmitter from '../index.js'\nimport SocketIO from 'socket.io'\nimport SocketIOClient from 'socket.io-client'\n\n// Setup a socket.io server\nconst ioPort = 3131;\nconst io = SocketIO().listen(ioPort);\n\n// Define the API that the server will expose\nconst apiFuncs = {\n  square: (num) => {\n    return num * num;\n  },\n  sqrt: (num) => {\n    return Math.sqrt(num)\n  }\n}; \n\n// First we wait for connections to the server\nio.on('connection', socket => {\n  console.log('-- server - connection recieved');\n  \n  // When a new connection is recieved we wrap\n  // the socket into a PromisedEmitter instance\n  const promisedAPI = new PromisedEmitter(\n    // First argument is the event emitter we want to wrap \n    socket,\n    // Optionally we can pass the API object as a second argument\n    apiFuncs,  \n    // The third argument is the debug flag\n    // If enabled the errors on the server will be thrown to the client\n    true,\n    // You can also pass a context object that will be passed as a\n    // second argument to any event handler\n    { foo: 'bar'}\n  );\n\n  // Another way to describe our API is to use the .on function on the\n  // PromisedEmitter instance the same way we do to a normal socket from\n  // socket.io\n  promisedAPI\n    .on('sayHelloTo', (name) => {\n      return `Hello ${name}!`;\n    })\n    .on('testContext', (arg, ctx) => {\n      return ctx;\n    })\n    // The .on method returns the PromisedEmitter instance\n    // so we can chain the calls.\n    .on('asyncWait', (secs) => {\n      // Our API functions can return promise, and the client\n      // will recieve the result when the promise is fulfilled\n      // or rejected.\n      return new Promise((f, r) => {\n        // As a simple example we simply fulfill the promise after\n        // a given number of seconds\n        console.log('-- server: waiting', secs, 'seconds');\n        setTimeout(() => {\n          console.log('-- server: waited', secs, 'seconds');\n          f(`Waited for ${secs} to return this string.`);\n        }, secs * 1000);\n      })\n    });\n\n});\n\n// Now that we have our API defined we can connect to it.\n\n// Setup a socket.io-client\nconst socket = new SocketIOClient(`ws://localhost:${ioPort}`);\n\n// Now we wrap the socket the same way we did to the server socket\nconst promisedClient = new PromisedEmitter(socket);\n\n// An we are ready to go! To call methods on the server\n// just pass the function name and the argument object to\n// .emit method of the PromiseEmitter instance\npromisedClient.emit('square', 5).then((result) => {\n  console.log(`-- client: The sqare method returned ${result}`);\n});\n\n// There is a builtin helper to retrieve the registered methods\n// on the other side. We can use it to create a real API objcet \n// of functions to call.\npromisedClient.emit('_getAPIMethods').then((methods) => {\n  let clientAPI = {};\n  \n  console.log('-- client: The server exposes the methods:', methods);\n\n  methods.forEach((method) => {\n    console.log('  -', method);\n    clientAPI[method] = (argument) => promisedClient.emit(method, argument);\n  });\n\n  // And now just use it like a regular API which methods return\n  // a Promise ;)\n  clientAPI.testContext().then((result) => {\n    console.log('-- client: server context =>', result);\n  });\n\n  clientAPI.asyncWait(5).then((result) => {\n    console.log('-- client: asyncWait method says:', result);\n    process.exit(0);\n  }).catch((err) => {\n    console.log('call failed:', err);\n    process.exit(1);\n  });\n}).catch((err) => {\n  console.log('Something bad happenned...');\n  throw err;\n});\n\n\n"]}